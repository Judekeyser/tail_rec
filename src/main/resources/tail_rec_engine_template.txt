package ${package_name} ;

public final class ${engine_name} implements ${directive_name} {

    @Override
    public ${tail_executor_return_type} ${tail_executor_name} ( ${tail_executor_args_signature} ) throws ${tail_executor_throw_types} {
        return new TailRecTrap(). ${tail_executor_name} ( ${tail_executor_args_name} );
    }

    @Override
    public Object ${tail_rec_name} ( ${tail_rec_args_signature} ) {
        throw new UnsupportedOperationException();
    }

    private static final Object TOKEN = new Object();

    private static final class TailRecTrap implements ${directive_name} {

        Object[] argsContainer = new Object[ ${args_container_size} ];
        DummyEngine dummyEngine = new DummyEngine(argsContainer);

        @Override
        public ${tail_executor_return_type} ${tail_executor_name} ( ${tail_executor_args_signature} ) throws ${tail_executor_throw_types} {
            return ${directive_name} .super. ${tail_executor_name} ( ${tail_executor_args_name} );
        }

        @Override
        public Object ${tail_rec_name} ( ${tail_rec_args_signature} ) {
            ${array_fill_instructions}
            Object caught;
            while(true) {
                caught = dummyEngine.invoke();
                if (caught != TOKEN)
                    return caught;
            }
        }

    }

    private static final class DummyEngine implements ${directive_name} {

        private final Object[] argsContainer;
        DummyEngine(Object[] argsContainer) {
            this.argsContainer = argsContainer;
        }

        Object invoke() {
            return ${directive_name} .super. ${tail_rec_name} ( ${tail_rec_unwrapped_array} );
        }

        @Override
        public ${tail_executor_return_type} ${tail_executor_name} ( ${tail_executor_args_signature} ) throws ${tail_executor_throw_types} {
            throw new UnsupportedOperationException();
        }

        @Override
        public Object ${tail_rec_name} ( ${tail_rec_args_signature} ) {
            ${array_fill_instructions}
            return TOKEN;
        }

    }

}
